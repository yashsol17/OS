
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

void bubbleSort(int arr[], int n) {
    for(int i = 0; i < n-1; i++)
        for(int j = 0; j < n-i-1; j++)
            if(arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}

void printArray(int arr[], int n) {
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int n, i;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d integers:\n", n);
    for(i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    pid_t pid = fork();

    if(pid < 0) {
        printf("Fork failed.\n");
        exit(1);
    }

    else if(pid == 0) {
        sleep(3); 
        printf("\nChild process (PID: %d)\n", getpid());
        bubbleSort(arr, n);
        printf("Child sorted array: ");
        printArray(arr, n);
        printf("Child process exiting...\n");
    }

    else {
        printf("\nParent process (PID: %d)\n", getpid());
        bubbleSort(arr, n);
        printf("Parent sorted array: ");
        printArray(arr, n);

        printf("Parent waiting for child...\n");
        wait(NULL);  
        printf("Child completed. Parent exiting...\n");

    }

    return 0;
}
