#include <stdio.h>
#include <stdlib.h>

int isPresent(int frames[], int size, int page) {
    for (int i = 0; i < size; i++) {
        if (frames[i] == page)
            return 1;
    }
    return 0;
}

int findFarthest(int pages[], int n, int frames[], int size, int currentIndex) {
    int farthestIndex = -1;
    int replacePos = -1;

    for (int i = 0; i < size; i++) {
        int j;
        for (j = currentIndex + 1; j < n; j++) {
            if (frames[i] == pages[j])
                break;
        }

        if (j == n)
            return i;

        if (j > farthestIndex) {
            farthestIndex = j;
            replacePos = i;
        }
    }
    return replacePos;
}

int optimalPageFaults(int pages[], int n, int capacity) {
    int *frames = (int *)malloc(capacity * sizeof(int));
    int size = 0;
    int pageFaults = 0;

    for (int i = 0; i < n; i++) {
        if (!isPresent(frames, size, pages[i])) {
            if (size < capacity) {
                frames[size++] = pages[i];
            } else {
                int pos = findFarthest(pages, n, frames, size, i);
                frames[pos] = pages[i];
            }
            pageFaults++;
        }
    }

    free(frames);
    return pageFaults;
}

int main() {
    int n, capacity;
    printf("Enter no of pages: ");
    scanf("%d", &n);

    int *pages = (int *)malloc(n * sizeof(int));
    printf("Enter pages: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter capacity: ");
    scanf("%d", &capacity);

    int faults = optimalPageFaults(pages, n, capacity);
    printf("Total page faults (Optimal): %d\n", faults);

    free(pages);
    return 0;
}
